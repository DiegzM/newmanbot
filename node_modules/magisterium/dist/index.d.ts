import BaseOpenAI, { ClientOptions } from 'openai';
import * as Core from 'openai/core';

/** API Client for interfacing with the Magisterium API. */
interface MagisteriumClientOptions extends ClientOptions {
    /**
     * Defaults to process.env['MAGISTERIUM_API_KEY'].
     */
    apiKey?: string | undefined;
}
/** API Client for interfacing with the Magisterium API. */
declare class Magisterium extends BaseOpenAI {
    apiVersion: string;
    /**
     * API Client for interfacing with the Magisterium API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['MAGISTERIUM_API_KEY'] ?? undefined]
     * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.
     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]
     * @param {string} [opts.baseURL=process.env['MAGISTERIUM_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.
     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
     */
    constructor({ baseURL, apiKey, dangerouslyAllowBrowser, ...opts }?: MagisteriumClientOptions);
    buildRequest(options: Core.FinalRequestOptions<unknown>): {
        req: RequestInit;
        url: string;
        timeout: number;
    };
    protected authHeaders(_: Core.FinalRequestOptions): Core.Headers;
}

export { Magisterium, type MagisteriumClientOptions, Magisterium as default };
