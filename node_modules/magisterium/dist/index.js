var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/index.ts
import BaseOpenAI from "openai";
import * as Core from "openai/core";
var Magisterium = class extends BaseOpenAI {
  /**
   * API Client for interfacing with the Magisterium API.
   *
   * @param {string | undefined} [opts.apiKey=process.env['MAGISTERIUM_API_KEY'] ?? undefined]
   * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.
   * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]
   * @param {string} [opts.baseURL=process.env['MAGISTERIUM_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.
   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
   */
  constructor({
    baseURL = Core.readEnv("MAGISTERIUM_BASE_URL"),
    apiKey = Core.readEnv("MAGISTERIUM_API_KEY"),
    dangerouslyAllowBrowser,
    ...opts
  } = {}) {
    apiKey ?? (apiKey = API_KEY_SENTINEL);
    opts.defaultQuery = { ...opts.defaultQuery };
    baseURL = baseURL || `https://www.magisterium.com/api/v1`;
    super({
      apiKey,
      baseURL,
      ...opts,
      ...dangerouslyAllowBrowser !== void 0 ? { dangerouslyAllowBrowser } : {}
    });
    __publicField(this, "apiVersion", "");
  }
  buildRequest(options) {
    if (!_deployments_endpoints.has(options.path)) {
      if (!Core.isObj(options.body)) {
        throw new Error("Expected request body to be an object");
      }
    }
    return super.buildRequest(options);
  }
  authHeaders(_) {
    return { Authorization: `Bearer ${this.apiKey}` };
  }
};
var _deployments_endpoints = /* @__PURE__ */ new Set(["/completions", "/chat/completions"]);
var API_KEY_SENTINEL = "<Missing Key>";
var src_default = Magisterium;
export {
  Magisterium,
  src_default as default
};
